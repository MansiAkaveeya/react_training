{"version":3,"sources":["serviceWorker.js","HOC/Wrapped.js","Components/DisplayComponent.js","Components/User.js","index.js"],"names":["Boolean","window","location","hostname","match","Wrapped","DisplayComponent","isLoaded","props","Spinner","animation","role","variant","className","Loader","Table","striped","bordered","hover","responsive","users","map","item","id","name","email","phone","age","city","useState","error","setError","setIsLoaded","setItem","useEffect","fetch","then","res","json","result","message","ReactDOM","render","document","getElementById"],"mappings":"+MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCCSC,MAff,SAAiBC,GACb,OAAO,YAA8B,IAApBC,EAAmB,EAAnBA,SAAYC,EAAO,4BAChC,OAAGD,EACQ,kBAACD,EAAqBE,GAG7B,6BACI,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAASC,QAAQ,UAC9C,0BAAMC,UAAU,WAAhB,kB,QCNdC,EAAST,GCJF,SAACG,GAEV,OACI,6BACI,4CAEA,kBAACO,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,EAACP,QAAQ,QAC7C,4BACI,kCACA,oCACA,qCACA,qCACA,mCACA,qCAEHJ,EAAMY,MAAMC,KAAI,SAAAC,GAAI,OACjB,4BACI,4BAAKA,EAAKC,IACV,4BAAKD,EAAKE,MACV,4BAAKF,EAAKG,OACV,4BAAKH,EAAKI,OACV,4BAAKJ,EAAKK,KACV,4BAAKL,EAAKM,eDanBtB,EA9BU,WAAM,IAAD,EAEAuB,mBAAS,MAFT,mBAEnBC,EAFmB,KAEZC,EAFY,OAGMF,oBAAS,GAHf,mBAGnBtB,EAHmB,KAGTyB,EAHS,OAIDH,mBAAS,IAJR,mBAInBT,EAJmB,KAIZa,EAJY,KAqB1B,OAfAC,qBAAU,WACNC,MAAM,qDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACGP,GAAY,GACZC,EAAQM,MAEZ,SAACT,GACGE,GAAY,GACZD,EAASD,QAGlB,IAEAA,EACI,uCAAaA,EAAMU,SAGlB,kBAAC1B,EAAD,CAAQP,SAAUA,EAAUa,MAAOA,KExB/CqB,IAASC,OAAO,kBAAC,EAAD,MAAqBC,SAASC,eAAe,W","file":"static/js/main.118006c0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\n\r\nfunction Wrapped(DisplayComponent){\r\n    return function({isLoaded,...props}){\r\n        if(isLoaded){\r\n            return <DisplayComponent {...props}/>\r\n        }\r\n        return(\r\n            <div>\r\n                <Spinner animation=\"border\" role=\"status\" variant=\"danger\" >\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </Spinner>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Wrapped;","import React from 'react';\r\nimport Wrapped from '../HOC/Wrapped'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport User from '../Components/User';\r\n\r\nconst Loader = Wrapped(User)\r\nconst DisplayComponent = () =>{\r\n\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [users, setItem] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://5e4cd3779b6805001438ef1f.mockapi.io/users\")\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                setIsLoaded(true);\r\n                setItem(result);\r\n            },\r\n            (error) => {\r\n                setIsLoaded(true);\r\n                setError(error);\r\n            }\r\n        )\r\n    }, [])\r\n    \r\n    if(error){\r\n    return <div>Error: {error.message}</div>\r\n    } else{\r\n        return(\r\n            <Loader isLoaded={isLoaded} users={users}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayComponent;","import React from 'react';\r\nimport Table from 'react-bootstrap/Table'\r\nconst User = (props) => {\r\n    debugger\r\n    return (\r\n        <div>\r\n            <h6>(day-12 HOC)</h6>\r\n\r\n            <Table striped bordered hover responsive variant=\"dark\">\r\n                <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Phone</th>\r\n                    <th>Age</th>\r\n                    <th>City</th>\r\n                </tr>\r\n                {props.users.map(item => (\r\n                    <tr>\r\n                        <td>{item.id}</td>\r\n                        <td>{item.name}</td>\r\n                        <td>{item.email}</td>\r\n                        <td>{item.phone}</td>\r\n                        <td>{item.age}</td>\r\n                        <td>{item.city}</td>\r\n                    </tr>\r\n                ))}\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport DisplayComponent from '../src/Components/DisplayComponent'\r\n\r\n\r\nReactDOM.render(<DisplayComponent/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n"],"sourceRoot":""}