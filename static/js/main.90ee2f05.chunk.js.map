{"version":3,"sources":["serviceWorker.js","Components/UI_demo.js","index.js"],"names":["Boolean","window","location","hostname","match","eventVariable","TotalUser","props","className","Details","Name","Button","variant","onClick","handleClick","InformationOfUser","Card","border","style","width","Body","Text","users","Age","City","List","state","id","user","this","setState","activeuserId","map","key","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICdFC,E,6CA0BJ,SAASC,EAAUC,GACf,OACI,6BACI,wBAAIC,UAAU,aAAaD,EAAME,QAAQC,KACzC,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASN,EAAMO,aAAzC,wBAIZ,SAASC,EAAkBR,GACvB,OACI,yBAAKC,UAAU,sBACX,kBAACQ,EAAA,EAAD,CAAMC,OAAO,UAAUC,MAAO,CAAEC,MAAO,UACnC,kBAACH,EAAA,EAAKI,KAAN,KACI,kBAACJ,EAAA,EAAKK,KAAN,KACI,oCAAUd,EAAMe,MAAMZ,MACtB,mCAASH,EAAMe,MAAMC,KACrB,oCAAUhB,EAAMe,MAAME,UAS/BC,M,kDAjDX,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IACDmB,MAAQ,CACTJ,MAAO,CACH,CAAEK,GAAI,EAAGjB,KAAM,iBAAkBa,IAAK,KAAMC,KAAM,UAClD,CAAEG,GAAI,EAAGjB,KAAM,kBAAmBa,IAAK,KAAMC,KAAM,aACnD,CAAEG,GAAI,EAAGjB,KAAM,kBAAoBa,IAAK,KAAMC,KAAM,cAN7C,E,wDAUPI,GACRvB,EAAgB,kBAACU,EAAD,CAAmBO,MAAOM,IAC1CC,KAAKC,SAAS,CAAEC,aAAcH,EAAKD,O,+BAE7B,IAAD,OACL,OACI,6BACKE,KAAKH,MAAMJ,MAAMU,KAAI,SAACJ,GAAD,OAClB,kBAACtB,EAAD,CAAW2B,IAAKL,EAAKD,GAAIlB,QAASmB,EAAMd,YAAa,kBAAM,EAAKA,YAAYc,SAC/EC,KAAKH,MAAMK,aAAe1B,EAAgB,U,GApBxC6B,IAAMC,W,MCGzBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SF2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90ee2f05.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nvar eventVariable;\r\nclass List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [\r\n                { id: 1, Name: 'Mansi Akaveeya', Age: '22', City: 'Rajkot' },\r\n                { id: 2, Name: 'Janvi Sagathiya', Age: '21', City: 'Ahemdabad' },\r\n                { id: 3, Name: 'Kiran Vaghasiya' , Age: '24', City: 'Vadodara'}\r\n            ]\r\n        };\r\n    }\r\n    handleClick(user) {\r\n        eventVariable = <InformationOfUser users={user} />\r\n        this.setState({ activeuserId: user.id })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.users.map((user) =>\r\n                    <TotalUser key={user.id} Details={user} handleClick={() => this.handleClick(user)} />)}\r\n                {this.state.activeuserId ? eventVariable : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nfunction TotalUser(props) {\r\n    return (\r\n        <div>\r\n            <h5 className=\"DemoStyle\">{props.Details.Name}\r\n            <Button variant=\"warning\" onClick={props.handleClick} >Click to see more.</Button></h5>\r\n        </div>\r\n    )\r\n}\r\nfunction InformationOfUser(props) {\r\n    return (\r\n        <div className=\"userDetailsDisplay\">\r\n            <Card border=\"warning\" style={{ width: '18rem' }}>\r\n                <Card.Body>\r\n                    <Card.Text>\r\n                        <p>Name: {props.users.Name}</p>\r\n                        <p>Age: {props.users.Age}</p>\r\n                        <p>City: {props.users.City}</p>\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport List from './Components/UI_demo'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<List /> ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}