{"version":3,"sources":["serviceWorker.js","Components/RegistrationForm.js","index.js"],"names":["Boolean","window","location","hostname","match","Displaydata","props","result","data","className","Card","bg","text","style","width","Header","Body","Title","firstName","lastName","Text","password","email","gender","department","RegistrationForm","state","isCorrect","initialValues","confirmPassword","acceptTandC","validationSchema","Yup","shape","required","min","oneOf","onSubmit","setState","errors","touched","name","type","component","value","for","as","class","htmlFor","Button","variant","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eab7ac4d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport '../App.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nfunction Displaydata(props) {\r\n    const result = props.data.result;\r\n    return (\r\n        <div className=\"d-flex justify-content-center\">\r\n            <div>\r\n                <Card bg=\"dark\" text=\"white\" style={{ width: '18rem' }}>\r\n                    <Card.Header>User Information</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>{result.firstName} {result.lastName}</Card.Title>\r\n                        <Card.Text>\r\n                            <p>Password : {result.password}</p>\r\n                            <p>Email : {result.email}</p>\r\n                            <p>Gender : {result.gender}</p>\r\n                            <p>Department : {result.department}</p>\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nclass RegistrationForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            result: '',\r\n            isCorrect: false\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <Formik\r\n                initialValues={{\r\n                    firstName: '',\r\n                    lastName: '',\r\n                    password: '',\r\n                    confirmPassword: '',\r\n                    acceptTandC: false,\r\n                    email: '',\r\n                    gender: 'male',\r\n                    department: '.NET'\r\n                }}\r\n\r\n                validationSchema={Yup.object().shape({\r\n                    firstName: Yup.string().required(\"First Name is required!\"),\r\n                    lastName: Yup.string().required('Last name is required'),\r\n                    password: Yup.string().min(6, \"Password length must be 6 char. long\").required(\"Password is required\"),\r\n                    confirmPassword: Yup.string().oneOf([Yup.ref('password')], 'Password must match').required('Password is required'),\r\n                    email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\r\n                    acceptTandC: Yup.bool().oneOf([true], \"You must accept T&C\")\r\n                })}\r\n                onSubmit={result => { this.setState({ result: result, isCorrect: true }) }}\r\n            >\r\n                {({ errors, touched }) => (\r\n                    <div className=\"container \">\r\n                        <div className=\"row\">\r\n                            <div className=\" col-md-6 col-sm-12\">\r\n                                <Form className=\"bg-light p-2\">\r\n                                    <div className=\"form-group m-0\">\r\n                                        <div className=\"form-group col m-0\">\r\n                                            <label>First Name : </label>\r\n                                            <Field name=\"firstName\" type=\"text\" className={\"form-control \" + (errors.firstName && touched.firstName ? 'is-invalid' : '')} />\r\n                                            <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                        </div>\r\n                                        <div className=\"form-group col m-0\">\r\n                                            <label>Last Name : </label>\r\n                                            <Field name=\"lastName\" type=\"text\" className={\"form-control \" + (errors.lastName && touched.lastName ? 'is-invalid' : '')} />\r\n                                            <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                        </div>\r\n                                        <div className=\"form-group col m-0\">\r\n                                            <label>Password : </label>\r\n                                            <Field name=\"password\" type=\"password\" className={\"form-control \" + (errors.password && touched.password ? 'is-invalid' : '')} />\r\n                                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                                        </div>\r\n                                        <div className=\"form-group col m-0\">\r\n                                            <label>Confirm password : </label>\r\n                                            <Field name=\"confirmPassword\" type=\"password\" className={\"form-control \" + (errors.confirmPassword && touched.confirmPassword ? 'is-invalid' : '')} />\r\n                                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\r\n                                        </div>\r\n                                        <div className=\"form-group col m-0\">\r\n                                            <label>Email : </label>\r\n                                            <Field name=\"email\" type=\"text\" className={\"form-control \" + (errors.email && touched.email ? 'is-invalid' : '')} />\r\n                                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                                        </div>\r\n                                        <div className=\"form-group form-check col m-0\">\r\n                                            <label>Gender : </label>\r\n                                            <div className=\"col\">\r\n                                                <Field type=\"radio\" name=\"gender\" value=\"male\" className={'form-check-input ' + (errors.gender && touched.gender ? ' is-invalid' : '')} />\r\n                                                <label>Male</label>\r\n                                            </div>\r\n                                            <div className=\"col\">\r\n                                                <Field type=\"radio\" name=\"gender\" value=\"female\" className={'form-check-input ' + (errors.gender && touched.gender ? ' is-invalid' : '')} />\r\n                                                <label>Female</label>\r\n                                            </div>\r\n                                            <ErrorMessage name=\"gender\" component=\"div\" className=\"invalid-feedback\" />\r\n                                        </div>\r\n                                        <div className=\"form-group col m-0\">\r\n                                            <label for=\"department\">Department : </label>\r\n                                            <Field name=\"department\" as=\"select\" class=\"custom-select\">\r\n                                                <option value=\".net\">.NET</option>\r\n                                                <option value=\"react\">React</option>\r\n                                                <option value=\"android\">Android</option>\r\n                                                <option value=\"ios\">IOS</option>\r\n                                            </Field>\r\n                                        </div>\r\n                                        <div className=\"form-group form-check col mt-1\">\r\n                                            <Field type=\"checkbox\" name=\"acceptTandC\" className={'form-check-input ' + (errors.acceptTandC && touched.acceptTandC ? ' is-invalid' : '')} />\r\n                                            <label htmlFor=\"acceptTandC\" className=\"form-check-label col\">Accept Terms & Conditions</label>\r\n                                            <ErrorMessage name=\"acceptTandC\" component=\"div\" className=\"invalid-feedback\" />\r\n                                        </div>\r\n                                        <div className=\"form-group col m-0\">\r\n                                            <Button variant=\"dark\" type=\"submit\" value=\"submit\">Submit</Button>\r\n                                            <Button variant=\"dark\" type=\"reset\" value=\"reset\" className='ml-2'>Reset</Button>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </Form>\r\n                            </div>\r\n                            <div className=\"col-md-6 col-sm-12\">\r\n                                <div className=\"mt-3\">\r\n                                    {\r\n                                        (this.state.isCorrect) && <Displaydata data={this.state} />\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Formik>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegistrationForm;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport RegistrationForm from './Components/RegistrationForm'\r\n\r\nReactDOM.render(<RegistrationForm/>,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}